def haversine_distance( lat1, lon1, lat2, lon2 )
    # PI = 3.1415926535
    rad_per_degree = 0.017453293  #  PI/180
	 
    # the great circle distance d will be in whatever units R is in
	 
    rmiles = 3956           # radius of the great circle in miles
    rkm = 6371              # radius in kilometers...some algorithms use 6367
    rfeet = rmiles * 5282   # radius in feet
    rmeters = rkm * 1000    # radius in meters

 	dlon = lon2 - lon1
	dlat = lat2 - lat1
	 
	dlon_rad = dlon * rad_per_degree
	dlat_rad = dlat * rad_per_degree
	 
	lat1_rad = lat1 * rad_per_degree
	lon1_rad = lon1 * rad_per_degree
	 
	lat2_rad = lat2 * rad_per_degree
	lon2_rad = lon2 * rad_per_degree
   
    puts "dlon: #{dlon}, dlon_rad: #{dlon_rad}, dlat: #{dlat}, dlat_rad: #{dlat_rad}"
	 
	a = (Math.sin(dlat_rad/2))**2 + Math.cos(lat1_rad) * Math.cos(lat2_rad) * (Math.sin(dlon_rad/2))**2
	c = 2 * Math.atan2( Math.sqrt(a), Math.sqrt(1-a))
	 
	dMi = rmiles * c          # delta between the two points in miles
	dKm = rkm * c             # delta in kilometers
	dFeet = rfeet * c         # delta in feet
	dMeters = rmeters * c     # delta in meters
	 
	return dMi
end

############################  Begin PDF Generation ############################

pdf.image("#{RAILS_ROOT}/public/images/title.png")
pdf.move_down(60)

pdf.text "#{@map}"
pdf.move_down(30)

stream = Hash.new
stream[:pic_google_map]="#{@map}"
pdf.image open(stream[:pic_google_map]), :width => 500, :height => 300, :position => :center
pdf.move_up(320)
pdf.image("#{RAILS_ROOT}/public/images/pdf/map-guide-markers-with-grid.png", :width => 540, :height => 320, :position => :center)

pdf.move_down(20)

table_content = @locations.map do |location|
	[
		location.location_profile.name,
		format("%0.6f", haversine_distance(@map_center_lat, @map_center_lng, location.lat, location.lng)),
		location.lat,
		location.lng
	]
end

pdf.table table_content, :border_style => :grid,
	:row_colors => ["FFFFFF", "DDDDDD"],
	:headers => ["Location Type", "Distance Miles", "Latitude", "Longitude"],
	:align => {0 => :left, 1 => :right, 2 => :right, 3 => :right}

pdf.font_size 12
pdf.bounding_box([pdf.bounds.left, pdf.bounds.bottom], :width => 200, :height => 20) do
pdf.text "Generated by ZombieStrategies.com"
end

pdf.font_size 14
pdf.bounding_box([pdf.bounds.right - 50, pdf.bounds.bottom], :width => 60, :height => 20) do
pagecount = pdf.page_count
pdf.text "Page #{pagecount}"
end